<template>
  <window>
    <menubar>
      <menu title="File">
        <action
          v-for="toggle in ['dock', 'dock_content', 'dock_title', 'toolbar', 'action', 'statusbar']"
          :text="f'Toggle {toggle}'"
          :object_name="f'toggle_{toggle}'"
          @triggered="partial(lambda toggle: toggle_item(toggle), toggle=toggle)"
        />
        <action separator />
        <action
          text="&Quit"
          @triggered="quit"
          :role="QtGui.QAction.QuitRole"
        />
      </menu>
    </menubar>
    <widget>
      <label text="Main widget" />
      <button @clicked="button_clicked" />
      <qcombobox
        :items="['foo', 'bar']"
        @activated="lambda index: run(index, 'resolution')"
      />
    </widget>
    <template
        v-if="toggles['show_dock']"
    >
      <dock
        :area="QtCore.Qt.LeftDockWidgetArea"
        object_name="dock"
      >
        <widget
          v-if="toggles['show_dock_title']"
          object_name="dock_title"
          title
        >
          <label text="Title" />
        </widget>
        <widget
          v-if="toggles['show_dock_content']"
          object_name="dock_content"
        >
          <treeview>
            <itemmodel :horizontal-header-labels="['Foo', 'Bar']">
              <standarditem
                v-for="item in standard_items"
                v-bind="item"
              />
            </itemmodel>
          </treeview>
        </widget>
      </dock>
    </template>
    <dock :area="QtCore.Qt.RightDockWidgetArea">
      <widget>
        <label text="other" />
      </widget>
    </dock>
    <toolbar
      v-if="toggles['show_toolbar']"
      object_name="toolbar"
    >
      <action
        v-if="toggles['show_action']"
        text="New"
        object_name="action"
        @triggered="on_new"
      />
    </toolbar>
    <statusbar
      v-if="toggles['show_statusbar']"
      object_name="statusbar"
      :text="'Hello there', 2000"
    />
  </window>
</template>

<script>
from functools import partial

from PySide6 import QtCore, QtGui, QtWidgets

import collagraph as cg


STATE_MAP = {
    False: QtCore.Qt.Unchecked,
    True: QtCore.Qt.Checked,
}


def quit():
    QtWidgets.QApplication.instance().quit()


class Window(cg.Component):
    def __init__(self, props):
        super().__init__(props)
        self.state['toggles'] = {
            'show_dock': True,
            'show_dock_title': True,
            'show_dock_content': True,
            'show_toolbar': True,
            'show_action': True,
            'show_statusbar': True,
        }
        self.state["items"] = [
            [["Item", "Value"], False],
            [["Foo", "Bar"], False],
        ]


    @property
    def standard_items(self):
      items = []
      for row, (item, check_state) in enumerate(self.state["items"]):
          for column, text in enumerate(item):
              child_props = {
                  "text": text,
                  "model_index": (row, column),
                  "checkable": column == 0,
              }
              if column == 0:
                  child_props["check_state"] = STATE_MAP[check_state]
              items.append(child_props)
      return items

    def on_new(self):
        pass

    def on_import(self):
        pass

    def button_clicked(self):
        pass

    def toggle_item(self, name):
        self.state['toggles'][f'show_{name}'] = not self.state['toggles'][f'show_{name}']
</script>
